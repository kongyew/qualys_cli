# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ImageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cs_images(self, **kwargs):  # noqa: E501
        """Delete images in your account  # noqa: E501

        Provide one or more image Ids or filters in the format shown under Example Value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cs_images(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] image_ids: delete the images from uuid
        :param str filter: delete the images from filter
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cs_images_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_cs_images_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_cs_images_with_http_info(self, **kwargs):  # noqa: E501
        """Delete images in your account  # noqa: E501

        Provide one or more image Ids or filters in the format shown under Example Value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cs_images_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] image_ids: delete the images from uuid
        :param str filter: delete the images from filter
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_ids', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cs_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'image_ids' in params:
            query_params.append(('imageIds', params['image_ids']))  # noqa: E501
            collection_formats['imageIds'] = 'multi'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cs_images_data_using_get(self, **kwargs):  # noqa: E501
        """Show a list of images in your account  # noqa: E501

        Show a list of images in your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_images_data_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the images list by providing a query using Qualys syntax.
        :param int page_number: The page to be returned.
        :param int page_size: The number of records per page to be included in the response.
        :param str sort: Sort the results using a Qualys token.
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cs_images_data_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cs_images_data_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cs_images_data_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Show a list of images in your account  # noqa: E501

        Show a list of images in your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_images_data_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the images list by providing a query using Qualys syntax.
        :param int page_number: The page to be returned.
        :param int page_size: The number of records per page to be included in the response.
        :param str sort: Sort the results using a Qualys token.
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cs_images_data_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Images',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_association_using_get(self, image_sha, **kwargs):  # noqa: E501
        """show associations of an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_association_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :param str filter:
        :param str type:
        :return: ImageAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_association_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_association_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_association_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """show associations of an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_association_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :param str filter:
        :param str type:
        :return: ImageAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha', 'filter', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_association_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_association_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/association', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageAssociation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_details_using_get(self, image_sha, **kwargs):  # noqa: E501
        """show details of an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_details_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: ImageDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_details_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_details_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_details_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """show details of an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_details_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: ImageDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_list_with_details(self, **kwargs):  # noqa: E501
        """Images Bulk API  # noqa: E501

        Returns response with given number of Image records according to filter along with next page filter query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_list_with_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param str pagination_query: The next page filter query.
        :param int limit: The number of records per page to be included in the response.
        :return: BulkImageDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_list_with_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_image_list_with_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_image_list_with_details_with_http_info(self, **kwargs):  # noqa: E501
        """Images Bulk API  # noqa: E501

        Returns response with given number of Image records according to filter along with next page filter query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_list_with_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param str pagination_query: The next page filter query.
        :param int limit: The number of records per page to be included in the response.
        :return: BulkImageDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'pagination_query', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_list_with_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'pagination_query' in params:
            query_params.append(('paginationQuery', params['pagination_query']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkImageDetailsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_policy_compliance_details_using_get(self, image_sha, **kwargs):  # noqa: E501
        """show policy compliance details of an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_policy_compliance_details_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: PolicyComplianceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_policy_compliance_details_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_policy_compliance_details_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_policy_compliance_details_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """show policy compliance details of an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_policy_compliance_details_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: PolicyComplianceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_policy_compliance_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_policy_compliance_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/compliance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyComplianceDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_registries_using_get(self, image_sha, **kwargs):  # noqa: E501
        """Get associated registries with Image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_registries_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: ImageRegistries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_registries_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_registries_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_registries_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """Get associated registries with Image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_registries_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: ImageRegistries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_registries_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_registries_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/associatedRegistries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageRegistries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_software_using_get(self, image_sha, **kwargs):  # noqa: E501
        """Show software installed on an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_software_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :param str filter: Filter the image vulnerability details by providing a query using Qualys syntax.
        :param str sort: Sort the results using a Qualys token.
        :return: ImageSoftware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_software_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_software_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_software_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """Show software installed on an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_software_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :param str filter: Filter the image vulnerability details by providing a query using Qualys syntax.
        :param str sort: Sort the results using a Qualys token.
        :return: ImageSoftware
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha', 'filter', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_software_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_software_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/software', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageSoftware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_vuln_count_using_get(self, image_sha, **kwargs):  # noqa: E501
        """Show vulnerability count for an image  # noqa: E501

        Show vulnerability count for an image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_vuln_count_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_vuln_count_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_vuln_count_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_vuln_count_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """Show vulnerability count for an image  # noqa: E501

        Show vulnerability count for an image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_vuln_count_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_vuln_count_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_vuln_count_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/vuln/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_image_vuln_using_get(self, image_sha, **kwargs):  # noqa: E501
        """Show vulnerability details for an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_vuln_using_get(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :param str filter: Filter the image vulnerability details by providing a query using Qualys syntax.
        :param str type: Specify the type of information to be fetched: Summary, Details, All
        :param str sort: Sort the results using a Qualys token.
        :return: ImageVulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_image_vuln_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_image_vuln_using_get_with_http_info(image_sha, **kwargs)  # noqa: E501
            return data

    def get_image_vuln_using_get_with_http_info(self, image_sha, **kwargs):  # noqa: E501
        """Show vulnerability details for an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_image_vuln_using_get_with_http_info(image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :param str filter: Filter the image vulnerability details by providing a query using Qualys syntax.
        :param str type: Specify the type of information to be fetched: Summary, Details, All
        :param str sort: Sort the results using a Qualys token.
        :return: ImageVulnerability
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_sha', 'filter', 'type', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_image_vuln_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `get_image_vuln_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/vuln', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImageVulnerability',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def instrumente_image(self, body, image_sha, **kwargs):  # noqa: E501
        """Instrumenting the image identified by image id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instrumente_image(body, image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstrumentRequest body: Provide parameter values in the format shown under Example Value. (required)
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.instrumente_image_with_http_info(body, image_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.instrumente_image_with_http_info(body, image_sha, **kwargs)  # noqa: E501
            return data

    def instrumente_image_with_http_info(self, body, image_sha, **kwargs):  # noqa: E501
        """Instrumenting the image identified by image id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.instrumente_image_with_http_info(body, image_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InstrumentRequest body: Provide parameter values in the format shown under Example Value. (required)
        :param str image_sha: Specify the SHA value of an Image in the user’s scope. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'image_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method instrumente_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `instrumente_image`")  # noqa: E501
        # verify the required parameter 'image_sha' is set
        if ('image_sha' not in params or
                params['image_sha'] is None):
            raise ValueError("Missing the required parameter `image_sha` when calling `instrumente_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'image_sha' in params:
            path_params['imageSha'] = params['image_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/images/{imageSha}/instrument', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
