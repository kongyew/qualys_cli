# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_report_request(self, body, **kwargs):  # noqa: E501
        """Create Report request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_report_request(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportRequest body: Provide parameter values in the format shown under Example Value. displayColumns can have following values if your template is <table> <tr> <th>CS_IMAGE_VULNERABILITY</th> <td>repo, imageId, sha, uuid, created, updated,  qid, title, severity, cveids, vendorReference, cvssBase, cvssTemporal, cvss3Base, cvss3Temporal, threat, impact, solution, exploitability, associatedMalwares, category, software, result</td> </tr> <tr> <th>CS_CONTAINER_VULNERABILITY</th> <td> name, containerId, uuid, imageId, created, hostName, hostIp, state, stateChanged, updated,  qid, title, severity, cveids, vendorReference, cvssBase, cvssTemporal, cvss3Base, cvss3Temporal, threat, impact, solution, exploitability, associatedMalwares, category, software, result</td> </tr> </table> <BR> (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_report_request_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_report_request_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_report_request_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Report request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_report_request_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReportRequest body: Provide parameter values in the format shown under Example Value. displayColumns can have following values if your template is <table> <tr> <th>CS_IMAGE_VULNERABILITY</th> <td>repo, imageId, sha, uuid, created, updated,  qid, title, severity, cveids, vendorReference, cvssBase, cvssTemporal, cvss3Base, cvss3Temporal, threat, impact, solution, exploitability, associatedMalwares, category, software, result</td> </tr> <tr> <th>CS_CONTAINER_VULNERABILITY</th> <td> name, containerId, uuid, imageId, created, hostName, hostIp, state, stateChanged, updated,  qid, title, severity, cveids, vendorReference, cvssBase, cvssTemporal, cvss3Base, cvss3Temporal, threat, impact, solution, exploitability, associatedMalwares, category, software, result</td> </tr> </table> <BR> (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_report_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_report_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cs_reports(self, report_uuids, **kwargs):  # noqa: E501
        """Delete Reports in your account  # noqa: E501

        Delete Reports in your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cs_reports(report_uuids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] report_uuids: delete the reports from uuid (required)
        :return: ReportsDeleteSucccess
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cs_reports_with_http_info(report_uuids, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cs_reports_with_http_info(report_uuids, **kwargs)  # noqa: E501
            return data

    def delete_cs_reports_with_http_info(self, report_uuids, **kwargs):  # noqa: E501
        """Delete Reports in your account  # noqa: E501

        Delete Reports in your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cs_reports_with_http_info(report_uuids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] report_uuids: delete the reports from uuid (required)
        :return: ReportsDeleteSucccess
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_uuids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cs_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_uuids' is set
        if ('report_uuids' not in params or
                params['report_uuids'] is None):
            raise ValueError("Missing the required parameter `report_uuids` when calling `delete_cs_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'report_uuids' in params:
            query_params.append(('reportUuids', params['report_uuids']))  # noqa: E501
            collection_formats['reportUuids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportsDeleteSucccess',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cs_report_download(self, report_uuid, **kwargs):  # noqa: E501
        """Show a details of a Report.  # noqa: E501

        Show a details of a Report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_report_download(report_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_uuid: Specify the report UUID of a specific report in the user’s scope (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cs_report_download_with_http_info(report_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cs_report_download_with_http_info(report_uuid, **kwargs)  # noqa: E501
            return data

    def get_cs_report_download_with_http_info(self, report_uuid, **kwargs):  # noqa: E501
        """Show a details of a Report.  # noqa: E501

        Show a details of a Report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_report_download_with_http_info(report_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_uuid: Specify the report UUID of a specific report in the user’s scope (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['report_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cs_report_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'report_uuid' is set
        if ('report_uuid' not in params or
                params['report_uuid'] is None):
            raise ValueError("Missing the required parameter `report_uuid` when calling `get_cs_report_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'report_uuid' in params:
            path_params['reportUuid'] = params['report_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports/{reportUuid}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cs_reports_list(self, **kwargs):  # noqa: E501
        """Show a list of reports in your account.  # noqa: E501

        Show a list of reports in your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_reports_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the reports list by providing a query using Qualys syntax.Only reportName is supported in filter query.
        :param int page_number: The page to be returned.
        :param int page_size: The number of records per page to be included in the response.
        :param str sort: Supported values are reportName/ status.
        :return: Reports
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cs_reports_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cs_reports_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cs_reports_list_with_http_info(self, **kwargs):  # noqa: E501
        """Show a list of reports in your account.  # noqa: E501

        Show a list of reports in your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_reports_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the reports list by providing a query using Qualys syntax.Only reportName is supported in filter query.
        :param int page_number: The page to be returned.
        :param int page_size: The number of records per page to be included in the response.
        :param str sort: Supported values are reportName/ status.
        :return: Reports
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cs_reports_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Reports',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
