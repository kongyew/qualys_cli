# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ContainerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_cs_containers(self, **kwargs):  # noqa: E501
        """Delete containers in your account  # noqa: E501

        Provide one or more container Ids or filters in the format shown under Example Value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cs_containers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] container_ids: delete the containers from uuid
        :param str filter: delete the containers from filter
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cs_containers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_cs_containers_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_cs_containers_with_http_info(self, **kwargs):  # noqa: E501
        """Delete containers in your account  # noqa: E501

        Provide one or more container Ids or filters in the format shown under Example Value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cs_containers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] container_ids: delete the containers from uuid
        :param str filter: delete the containers from filter
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_ids', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cs_containers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'container_ids' in params:
            query_params.append(('containerIds', params['container_ids']))  # noqa: E501
            collection_formats['containerIds'] = 'multi'  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_details_using_get(self, container_sha, **kwargs):  # noqa: E501
        """show details of a container  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_details_using_get(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :return: ContainerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_details_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_details_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
            return data

    def get_container_details_using_get_with_http_info(self, container_sha, **kwargs):  # noqa: E501
        """show details of a container  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_details_using_get_with_http_info(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :return: ContainerDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_sha' is set
        if ('container_sha' not in params or
                params['container_sha'] is None):
            raise ValueError("Missing the required parameter `container_sha` when calling `get_container_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_sha' in params:
            path_params['containerSha'] = params['container_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{containerSha}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_list_with_details(self, **kwargs):  # noqa: E501
        """Containers Bulk API  # noqa: E501

        Returns response with given number of Container records according to filter along with next page filter query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_list_with_details(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param str pagination_query: The next page filter query.
        :param int limit: The number of records per page to be included in the response.
        :return: BulkContainerDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_list_with_details_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_container_list_with_details_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_container_list_with_details_with_http_info(self, **kwargs):  # noqa: E501
        """Containers Bulk API  # noqa: E501

        Returns response with given number of Container records according to filter along with next page filter query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_list_with_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param str pagination_query: The next page filter query.
        :param int limit: The number of records per page to be included in the response.
        :return: BulkContainerDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'pagination_query', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_list_with_details" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'pagination_query' in params:
            query_params.append(('paginationQuery', params['pagination_query']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkContainerDetailsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_policy_compliance_details_using_get(self, container_sha, **kwargs):  # noqa: E501
        """show policy compliance details of a container  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_policy_compliance_details_using_get(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :return: PolicyComplianceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_policy_compliance_details_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_policy_compliance_details_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
            return data

    def get_container_policy_compliance_details_using_get_with_http_info(self, container_sha, **kwargs):  # noqa: E501
        """show policy compliance details of a container  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_policy_compliance_details_using_get_with_http_info(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :return: PolicyComplianceDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_policy_compliance_details_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_sha' is set
        if ('container_sha' not in params or
                params['container_sha'] is None):
            raise ValueError("Missing the required parameter `container_sha` when calling `get_container_policy_compliance_details_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_sha' in params:
            path_params['containerSha'] = params['container_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{containerSha}/compliance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyComplianceDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_software_using_get(self, container_sha, **kwargs):  # noqa: E501
        """Show software installed on a container  # noqa: E501

        Show software installed on a container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_software_using_get(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param str sort: Sort the results using a Qualys token. For example created:desc
        :param bool is_drift:
        :return: ContainerSoftware
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_software_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_software_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
            return data

    def get_container_software_using_get_with_http_info(self, container_sha, **kwargs):  # noqa: E501
        """Show software installed on a container  # noqa: E501

        Show software installed on a container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_software_using_get_with_http_info(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param str sort: Sort the results using a Qualys token. For example created:desc
        :param bool is_drift:
        :return: ContainerSoftware
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_sha', 'filter', 'sort', 'is_drift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_software_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_sha' is set
        if ('container_sha' not in params or
                params['container_sha'] is None):
            raise ValueError("Missing the required parameter `container_sha` when calling `get_container_software_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_sha' in params:
            path_params['containerSha'] = params['container_sha']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'is_drift' in params:
            query_params.append(('isDrift', params['is_drift']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{containerSha}/software', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerSoftware',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_vuln_count_using_get(self, container_sha, **kwargs):  # noqa: E501
        """Show vulnerability count for a container  # noqa: E501

        Show vulnerability count for a container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_vuln_count_using_get(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_vuln_count_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_vuln_count_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
            return data

    def get_container_vuln_count_using_get_with_http_info(self, container_sha, **kwargs):  # noqa: E501
        """Show vulnerability count for a container  # noqa: E501

        Show vulnerability count for a container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_vuln_count_using_get_with_http_info(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_sha']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_vuln_count_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_sha' is set
        if ('container_sha' not in params or
                params['container_sha'] is None):
            raise ValueError("Missing the required parameter `container_sha` when calling `get_container_vuln_count_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_sha' in params:
            path_params['containerSha'] = params['container_sha']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{containerSha}/vuln/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_vuln_using_get(self, container_sha, **kwargs):  # noqa: E501
        """Show vulnerability details for a container  # noqa: E501

        Show vulnerability details for a container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_vuln_using_get(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :param str filter: Filter the container vulnerability details by providing a query using Qualys syntax.
        :param str type:
        :param bool is_drift:
        :return: ContainerVuln
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_vuln_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_vuln_using_get_with_http_info(container_sha, **kwargs)  # noqa: E501
            return data

    def get_container_vuln_using_get_with_http_info(self, container_sha, **kwargs):  # noqa: E501
        """Show vulnerability details for a container  # noqa: E501

        Show vulnerability details for a container  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_vuln_using_get_with_http_info(container_sha, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_sha: Specify the SHA value of a Container in the user’s scope. (required)
        :param str filter: Filter the container vulnerability details by providing a query using Qualys syntax.
        :param str type:
        :param bool is_drift:
        :return: ContainerVuln
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_sha', 'filter', 'type', 'is_drift']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_vuln_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_sha' is set
        if ('container_sha' not in params or
                params['container_sha'] is None):
            raise ValueError("Missing the required parameter `container_sha` when calling `get_container_vuln_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_sha' in params:
            path_params['containerSha'] = params['container_sha']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'is_drift' in params:
            query_params.append(('isDrift', params['is_drift']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers/{containerSha}/vuln', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerVuln',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cs_containers_data_using_get(self, **kwargs):  # noqa: E501
        """Show a list of containers in your account  # noqa: E501

        Show a list of containers in your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_containers_data_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param int page_number: The page to be returned.
        :param int page_size: The number of records per page to be included in the response.
        :param str sort: Sort the results using a Qualys token.
        :return: Containers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cs_containers_data_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cs_containers_data_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cs_containers_data_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Show a list of containers in your account  # noqa: E501

        Show a list of containers in your account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cs_containers_data_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: Filter the containers list by providing a query using Qualys syntax.
        :param int page_number: The page to be returned.
        :param int page_size: The number of records per page to be included in the response.
        :param str sort: Sort the results using a Qualys token.
        :return: Containers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'page_number', 'page_size', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cs_containers_data_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page_number' in params:
            query_params.append(('pageNumber', params['page_number']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/containers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Containers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
