# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list[ScheduleFilters]',
        'name': 'str',
        'on_demand': 'bool',
        'schedule': 'str'
    }

    attribute_map = {
        'filters': 'filters',
        'name': 'name',
        'on_demand': 'onDemand',
        'schedule': 'schedule'
    }

    def __init__(self, filters=None, name=None, on_demand=None, schedule=None):  # noqa: E501
        """ScheduleRequest - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._name = None
        self._on_demand = None
        self._schedule = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        if name is not None:
            self.name = name
        if on_demand is not None:
            self.on_demand = on_demand
        if schedule is not None:
            self.schedule = schedule

    @property
    def filters(self):
        """Gets the filters of this ScheduleRequest.  # noqa: E501


        :return: The filters of this ScheduleRequest.  # noqa: E501
        :rtype: list[ScheduleFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ScheduleRequest.


        :param filters: The filters of this ScheduleRequest.  # noqa: E501
        :type: list[ScheduleFilters]
        """

        self._filters = filters

    @property
    def name(self):
        """Gets the name of this ScheduleRequest.  # noqa: E501


        :return: The name of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleRequest.


        :param name: The name of this ScheduleRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def on_demand(self):
        """Gets the on_demand of this ScheduleRequest.  # noqa: E501


        :return: The on_demand of this ScheduleRequest.  # noqa: E501
        :rtype: bool
        """
        return self._on_demand

    @on_demand.setter
    def on_demand(self, on_demand):
        """Sets the on_demand of this ScheduleRequest.


        :param on_demand: The on_demand of this ScheduleRequest.  # noqa: E501
        :type: bool
        """

        self._on_demand = on_demand

    @property
    def schedule(self):
        """Gets the schedule of this ScheduleRequest.  # noqa: E501


        :return: The schedule of this ScheduleRequest.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this ScheduleRequest.


        :param schedule: The schedule of this ScheduleRequest.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
