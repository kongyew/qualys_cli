# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThreatIntel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_attacks': 'bool',
        'denial_of_service': 'bool',
        'easy_exploit': 'bool',
        'exploit_kit': 'bool',
        'exploit_kit_names': 'list[str]',
        'high_data_loss': 'bool',
        'high_lateral_movement': 'bool',
        'malware': 'bool',
        'malware_names': 'list[str]',
        'no_patch': 'bool',
        'public_exploit': 'bool',
        'public_exploit_names': 'list[str]',
        'zero_day': 'bool'
    }

    attribute_map = {
        'active_attacks': 'activeAttacks',
        'denial_of_service': 'denialOfService',
        'easy_exploit': 'easyExploit',
        'exploit_kit': 'exploitKit',
        'exploit_kit_names': 'exploitKitNames',
        'high_data_loss': 'highDataLoss',
        'high_lateral_movement': 'highLateralMovement',
        'malware': 'malware',
        'malware_names': 'malwareNames',
        'no_patch': 'noPatch',
        'public_exploit': 'publicExploit',
        'public_exploit_names': 'publicExploitNames',
        'zero_day': 'zeroDay'
    }

    def __init__(self, active_attacks=None, denial_of_service=None, easy_exploit=None, exploit_kit=None, exploit_kit_names=None, high_data_loss=None, high_lateral_movement=None, malware=None, malware_names=None, no_patch=None, public_exploit=None, public_exploit_names=None, zero_day=None):  # noqa: E501
        """ThreatIntel - a model defined in Swagger"""  # noqa: E501
        self._active_attacks = None
        self._denial_of_service = None
        self._easy_exploit = None
        self._exploit_kit = None
        self._exploit_kit_names = None
        self._high_data_loss = None
        self._high_lateral_movement = None
        self._malware = None
        self._malware_names = None
        self._no_patch = None
        self._public_exploit = None
        self._public_exploit_names = None
        self._zero_day = None
        self.discriminator = None
        if active_attacks is not None:
            self.active_attacks = active_attacks
        if denial_of_service is not None:
            self.denial_of_service = denial_of_service
        if easy_exploit is not None:
            self.easy_exploit = easy_exploit
        if exploit_kit is not None:
            self.exploit_kit = exploit_kit
        if exploit_kit_names is not None:
            self.exploit_kit_names = exploit_kit_names
        if high_data_loss is not None:
            self.high_data_loss = high_data_loss
        if high_lateral_movement is not None:
            self.high_lateral_movement = high_lateral_movement
        if malware is not None:
            self.malware = malware
        if malware_names is not None:
            self.malware_names = malware_names
        if no_patch is not None:
            self.no_patch = no_patch
        if public_exploit is not None:
            self.public_exploit = public_exploit
        if public_exploit_names is not None:
            self.public_exploit_names = public_exploit_names
        if zero_day is not None:
            self.zero_day = zero_day

    @property
    def active_attacks(self):
        """Gets the active_attacks of this ThreatIntel.  # noqa: E501


        :return: The active_attacks of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._active_attacks

    @active_attacks.setter
    def active_attacks(self, active_attacks):
        """Sets the active_attacks of this ThreatIntel.


        :param active_attacks: The active_attacks of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._active_attacks = active_attacks

    @property
    def denial_of_service(self):
        """Gets the denial_of_service of this ThreatIntel.  # noqa: E501


        :return: The denial_of_service of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._denial_of_service

    @denial_of_service.setter
    def denial_of_service(self, denial_of_service):
        """Sets the denial_of_service of this ThreatIntel.


        :param denial_of_service: The denial_of_service of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._denial_of_service = denial_of_service

    @property
    def easy_exploit(self):
        """Gets the easy_exploit of this ThreatIntel.  # noqa: E501


        :return: The easy_exploit of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._easy_exploit

    @easy_exploit.setter
    def easy_exploit(self, easy_exploit):
        """Sets the easy_exploit of this ThreatIntel.


        :param easy_exploit: The easy_exploit of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._easy_exploit = easy_exploit

    @property
    def exploit_kit(self):
        """Gets the exploit_kit of this ThreatIntel.  # noqa: E501


        :return: The exploit_kit of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._exploit_kit

    @exploit_kit.setter
    def exploit_kit(self, exploit_kit):
        """Sets the exploit_kit of this ThreatIntel.


        :param exploit_kit: The exploit_kit of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._exploit_kit = exploit_kit

    @property
    def exploit_kit_names(self):
        """Gets the exploit_kit_names of this ThreatIntel.  # noqa: E501


        :return: The exploit_kit_names of this ThreatIntel.  # noqa: E501
        :rtype: list[str]
        """
        return self._exploit_kit_names

    @exploit_kit_names.setter
    def exploit_kit_names(self, exploit_kit_names):
        """Sets the exploit_kit_names of this ThreatIntel.


        :param exploit_kit_names: The exploit_kit_names of this ThreatIntel.  # noqa: E501
        :type: list[str]
        """

        self._exploit_kit_names = exploit_kit_names

    @property
    def high_data_loss(self):
        """Gets the high_data_loss of this ThreatIntel.  # noqa: E501


        :return: The high_data_loss of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._high_data_loss

    @high_data_loss.setter
    def high_data_loss(self, high_data_loss):
        """Sets the high_data_loss of this ThreatIntel.


        :param high_data_loss: The high_data_loss of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._high_data_loss = high_data_loss

    @property
    def high_lateral_movement(self):
        """Gets the high_lateral_movement of this ThreatIntel.  # noqa: E501


        :return: The high_lateral_movement of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._high_lateral_movement

    @high_lateral_movement.setter
    def high_lateral_movement(self, high_lateral_movement):
        """Sets the high_lateral_movement of this ThreatIntel.


        :param high_lateral_movement: The high_lateral_movement of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._high_lateral_movement = high_lateral_movement

    @property
    def malware(self):
        """Gets the malware of this ThreatIntel.  # noqa: E501


        :return: The malware of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._malware

    @malware.setter
    def malware(self, malware):
        """Sets the malware of this ThreatIntel.


        :param malware: The malware of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._malware = malware

    @property
    def malware_names(self):
        """Gets the malware_names of this ThreatIntel.  # noqa: E501


        :return: The malware_names of this ThreatIntel.  # noqa: E501
        :rtype: list[str]
        """
        return self._malware_names

    @malware_names.setter
    def malware_names(self, malware_names):
        """Sets the malware_names of this ThreatIntel.


        :param malware_names: The malware_names of this ThreatIntel.  # noqa: E501
        :type: list[str]
        """

        self._malware_names = malware_names

    @property
    def no_patch(self):
        """Gets the no_patch of this ThreatIntel.  # noqa: E501


        :return: The no_patch of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._no_patch

    @no_patch.setter
    def no_patch(self, no_patch):
        """Sets the no_patch of this ThreatIntel.


        :param no_patch: The no_patch of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._no_patch = no_patch

    @property
    def public_exploit(self):
        """Gets the public_exploit of this ThreatIntel.  # noqa: E501


        :return: The public_exploit of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._public_exploit

    @public_exploit.setter
    def public_exploit(self, public_exploit):
        """Sets the public_exploit of this ThreatIntel.


        :param public_exploit: The public_exploit of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._public_exploit = public_exploit

    @property
    def public_exploit_names(self):
        """Gets the public_exploit_names of this ThreatIntel.  # noqa: E501


        :return: The public_exploit_names of this ThreatIntel.  # noqa: E501
        :rtype: list[str]
        """
        return self._public_exploit_names

    @public_exploit_names.setter
    def public_exploit_names(self, public_exploit_names):
        """Sets the public_exploit_names of this ThreatIntel.


        :param public_exploit_names: The public_exploit_names of this ThreatIntel.  # noqa: E501
        :type: list[str]
        """

        self._public_exploit_names = public_exploit_names

    @property
    def zero_day(self):
        """Gets the zero_day of this ThreatIntel.  # noqa: E501


        :return: The zero_day of this ThreatIntel.  # noqa: E501
        :rtype: bool
        """
        return self._zero_day

    @zero_day.setter
    def zero_day(self, zero_day):
        """Sets the zero_day of this ThreatIntel.


        :param zero_day: The zero_day of this ThreatIntel.  # noqa: E501
        :type: bool
        """

        self._zero_day = zero_day

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThreatIntel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatIntel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
