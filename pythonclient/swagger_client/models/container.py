# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Container(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_id': 'str',
        'created': 'str',
        'updated': 'str',
        'sha': 'str',
        'name': 'str',
        'host': 'Host',
        'state': 'str',
        'image_uuid': 'str',
        'container_id': 'str',
        'state_changed': 'str',
        'last_scanned': 'str',
        'is_root': 'bool',
        'vulnerabilities': 'object',
        'is_instrumented': 'bool'
    }

    attribute_map = {
        'image_id': 'imageId',
        'created': 'created',
        'updated': 'updated',
        'sha': 'sha',
        'name': 'name',
        'host': 'host',
        'state': 'state',
        'image_uuid': 'imageUuid',
        'container_id': 'containerId',
        'state_changed': 'stateChanged',
        'last_scanned': 'lastScanned',
        'is_root': 'isRoot',
        'vulnerabilities': 'vulnerabilities',
        'is_instrumented': 'isInstrumented'
    }

    def __init__(self, image_id=None, created=None, updated=None, sha=None, name=None, host=None, state=None, image_uuid=None, container_id=None, state_changed=None, last_scanned=None, is_root=None, vulnerabilities=None, is_instrumented=None):  # noqa: E501
        """Container - a model defined in Swagger"""  # noqa: E501
        self._image_id = None
        self._created = None
        self._updated = None
        self._sha = None
        self._name = None
        self._host = None
        self._state = None
        self._image_uuid = None
        self._container_id = None
        self._state_changed = None
        self._last_scanned = None
        self._is_root = None
        self._vulnerabilities = None
        self._is_instrumented = None
        self.discriminator = None
        if image_id is not None:
            self.image_id = image_id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if sha is not None:
            self.sha = sha
        if name is not None:
            self.name = name
        if host is not None:
            self.host = host
        if state is not None:
            self.state = state
        if image_uuid is not None:
            self.image_uuid = image_uuid
        if container_id is not None:
            self.container_id = container_id
        if state_changed is not None:
            self.state_changed = state_changed
        if last_scanned is not None:
            self.last_scanned = last_scanned
        if is_root is not None:
            self.is_root = is_root
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities
        if is_instrumented is not None:
            self.is_instrumented = is_instrumented

    @property
    def image_id(self):
        """Gets the image_id of this Container.  # noqa: E501


        :return: The image_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this Container.


        :param image_id: The image_id of this Container.  # noqa: E501
        :type: str
        """

        self._image_id = image_id

    @property
    def created(self):
        """Gets the created of this Container.  # noqa: E501


        :return: The created of this Container.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Container.


        :param created: The created of this Container.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Container.  # noqa: E501


        :return: The updated of this Container.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Container.


        :param updated: The updated of this Container.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def sha(self):
        """Gets the sha of this Container.  # noqa: E501


        :return: The sha of this Container.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this Container.


        :param sha: The sha of this Container.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def name(self):
        """Gets the name of this Container.  # noqa: E501


        :return: The name of this Container.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.


        :param name: The name of this Container.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def host(self):
        """Gets the host of this Container.  # noqa: E501


        :return: The host of this Container.  # noqa: E501
        :rtype: Host
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Container.


        :param host: The host of this Container.  # noqa: E501
        :type: Host
        """

        self._host = host

    @property
    def state(self):
        """Gets the state of this Container.  # noqa: E501


        :return: The state of this Container.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Container.


        :param state: The state of this Container.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def image_uuid(self):
        """Gets the image_uuid of this Container.  # noqa: E501


        :return: The image_uuid of this Container.  # noqa: E501
        :rtype: str
        """
        return self._image_uuid

    @image_uuid.setter
    def image_uuid(self, image_uuid):
        """Sets the image_uuid of this Container.


        :param image_uuid: The image_uuid of this Container.  # noqa: E501
        :type: str
        """

        self._image_uuid = image_uuid

    @property
    def container_id(self):
        """Gets the container_id of this Container.  # noqa: E501


        :return: The container_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Container.


        :param container_id: The container_id of this Container.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def state_changed(self):
        """Gets the state_changed of this Container.  # noqa: E501


        :return: The state_changed of this Container.  # noqa: E501
        :rtype: str
        """
        return self._state_changed

    @state_changed.setter
    def state_changed(self, state_changed):
        """Sets the state_changed of this Container.


        :param state_changed: The state_changed of this Container.  # noqa: E501
        :type: str
        """

        self._state_changed = state_changed

    @property
    def last_scanned(self):
        """Gets the last_scanned of this Container.  # noqa: E501


        :return: The last_scanned of this Container.  # noqa: E501
        :rtype: str
        """
        return self._last_scanned

    @last_scanned.setter
    def last_scanned(self, last_scanned):
        """Sets the last_scanned of this Container.


        :param last_scanned: The last_scanned of this Container.  # noqa: E501
        :type: str
        """

        self._last_scanned = last_scanned

    @property
    def is_root(self):
        """Gets the is_root of this Container.  # noqa: E501


        :return: The is_root of this Container.  # noqa: E501
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this Container.


        :param is_root: The is_root of this Container.  # noqa: E501
        :type: bool
        """

        self._is_root = is_root

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this Container.  # noqa: E501


        :return: The vulnerabilities of this Container.  # noqa: E501
        :rtype: object
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this Container.


        :param vulnerabilities: The vulnerabilities of this Container.  # noqa: E501
        :type: object
        """

        self._vulnerabilities = vulnerabilities

    @property
    def is_instrumented(self):
        """Gets the is_instrumented of this Container.  # noqa: E501


        :return: The is_instrumented of this Container.  # noqa: E501
        :rtype: bool
        """
        return self._is_instrumented

    @is_instrumented.setter
    def is_instrumented(self, is_instrumented):
        """Sets the is_instrumented of this Container.


        :param is_instrumented: The is_instrumented of this Container.  # noqa: E501
        :type: bool
        """

        self._is_instrumented = is_instrumented

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Container, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Container):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
