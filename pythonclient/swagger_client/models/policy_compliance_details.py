# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyComplianceDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_uuid': 'str',
        'uuid': 'str',
        'sha': 'str',
        'created': 'str',
        'updated': 'str',
        'controls': 'list[ControlDetails]',
        'last_compliance_scanned': 'str'
    }

    attribute_map = {
        'customer_uuid': 'customerUuid',
        'uuid': 'uuid',
        'sha': 'sha',
        'created': 'created',
        'updated': 'updated',
        'controls': 'controls',
        'last_compliance_scanned': 'lastComplianceScanned'
    }

    def __init__(self, customer_uuid=None, uuid=None, sha=None, created=None, updated=None, controls=None, last_compliance_scanned=None):  # noqa: E501
        """PolicyComplianceDetails - a model defined in Swagger"""  # noqa: E501
        self._customer_uuid = None
        self._uuid = None
        self._sha = None
        self._created = None
        self._updated = None
        self._controls = None
        self._last_compliance_scanned = None
        self.discriminator = None
        if customer_uuid is not None:
            self.customer_uuid = customer_uuid
        if uuid is not None:
            self.uuid = uuid
        if sha is not None:
            self.sha = sha
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if controls is not None:
            self.controls = controls
        if last_compliance_scanned is not None:
            self.last_compliance_scanned = last_compliance_scanned

    @property
    def customer_uuid(self):
        """Gets the customer_uuid of this PolicyComplianceDetails.  # noqa: E501


        :return: The customer_uuid of this PolicyComplianceDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_uuid

    @customer_uuid.setter
    def customer_uuid(self, customer_uuid):
        """Sets the customer_uuid of this PolicyComplianceDetails.


        :param customer_uuid: The customer_uuid of this PolicyComplianceDetails.  # noqa: E501
        :type: str
        """

        self._customer_uuid = customer_uuid

    @property
    def uuid(self):
        """Gets the uuid of this PolicyComplianceDetails.  # noqa: E501


        :return: The uuid of this PolicyComplianceDetails.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this PolicyComplianceDetails.


        :param uuid: The uuid of this PolicyComplianceDetails.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def sha(self):
        """Gets the sha of this PolicyComplianceDetails.  # noqa: E501


        :return: The sha of this PolicyComplianceDetails.  # noqa: E501
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this PolicyComplianceDetails.


        :param sha: The sha of this PolicyComplianceDetails.  # noqa: E501
        :type: str
        """

        self._sha = sha

    @property
    def created(self):
        """Gets the created of this PolicyComplianceDetails.  # noqa: E501


        :return: The created of this PolicyComplianceDetails.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PolicyComplianceDetails.


        :param created: The created of this PolicyComplianceDetails.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this PolicyComplianceDetails.  # noqa: E501


        :return: The updated of this PolicyComplianceDetails.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PolicyComplianceDetails.


        :param updated: The updated of this PolicyComplianceDetails.  # noqa: E501
        :type: str
        """

        self._updated = updated

    @property
    def controls(self):
        """Gets the controls of this PolicyComplianceDetails.  # noqa: E501


        :return: The controls of this PolicyComplianceDetails.  # noqa: E501
        :rtype: list[ControlDetails]
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this PolicyComplianceDetails.


        :param controls: The controls of this PolicyComplianceDetails.  # noqa: E501
        :type: list[ControlDetails]
        """

        self._controls = controls

    @property
    def last_compliance_scanned(self):
        """Gets the last_compliance_scanned of this PolicyComplianceDetails.  # noqa: E501


        :return: The last_compliance_scanned of this PolicyComplianceDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_compliance_scanned

    @last_compliance_scanned.setter
    def last_compliance_scanned(self, last_compliance_scanned):
        """Sets the last_compliance_scanned of this PolicyComplianceDetails.


        :param last_compliance_scanned: The last_compliance_scanned of this PolicyComplianceDetails.  # noqa: E501
        :type: str
        """

        self._last_compliance_scanned = last_compliance_scanned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyComplianceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyComplianceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
