# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Host(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'ip_address': 'str',
        'sensor_uuid': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'hostname': 'hostname',
        'ip_address': 'ipAddress',
        'sensor_uuid': 'sensorUuid',
        'uuid': 'uuid'
    }

    def __init__(self, hostname=None, ip_address=None, sensor_uuid=None, uuid=None):  # noqa: E501
        """Host - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._ip_address = None
        self._sensor_uuid = None
        self._uuid = None
        self.discriminator = None
        if hostname is not None:
            self.hostname = hostname
        if ip_address is not None:
            self.ip_address = ip_address
        if sensor_uuid is not None:
            self.sensor_uuid = sensor_uuid
        if uuid is not None:
            self.uuid = uuid

    @property
    def hostname(self):
        """Gets the hostname of this Host.  # noqa: E501


        :return: The hostname of this Host.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Host.


        :param hostname: The hostname of this Host.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ip_address(self):
        """Gets the ip_address of this Host.  # noqa: E501


        :return: The ip_address of this Host.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Host.


        :param ip_address: The ip_address of this Host.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def sensor_uuid(self):
        """Gets the sensor_uuid of this Host.  # noqa: E501


        :return: The sensor_uuid of this Host.  # noqa: E501
        :rtype: str
        """
        return self._sensor_uuid

    @sensor_uuid.setter
    def sensor_uuid(self, sensor_uuid):
        """Sets the sensor_uuid of this Host.


        :param sensor_uuid: The sensor_uuid of this Host.  # noqa: E501
        :type: str
        """

        self._sensor_uuid = sensor_uuid

    @property
    def uuid(self):
        """Gets the uuid of this Host.  # noqa: E501


        :return: The uuid of this Host.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Host.


        :param uuid: The uuid of this Host.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Host, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
