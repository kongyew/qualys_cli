# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Repository(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repo_name': 'str',
        'total_images': 'int',
        'total_scanned_images': 'int',
        'total_vulnerable_images': 'int'
    }

    attribute_map = {
        'repo_name': 'repoName',
        'total_images': 'totalImages',
        'total_scanned_images': 'totalScannedImages',
        'total_vulnerable_images': 'totalVulnerableImages'
    }

    def __init__(self, repo_name=None, total_images=None, total_scanned_images=None, total_vulnerable_images=None):  # noqa: E501
        """Repository - a model defined in Swagger"""  # noqa: E501
        self._repo_name = None
        self._total_images = None
        self._total_scanned_images = None
        self._total_vulnerable_images = None
        self.discriminator = None
        if repo_name is not None:
            self.repo_name = repo_name
        if total_images is not None:
            self.total_images = total_images
        if total_scanned_images is not None:
            self.total_scanned_images = total_scanned_images
        if total_vulnerable_images is not None:
            self.total_vulnerable_images = total_vulnerable_images

    @property
    def repo_name(self):
        """Gets the repo_name of this Repository.  # noqa: E501


        :return: The repo_name of this Repository.  # noqa: E501
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this Repository.


        :param repo_name: The repo_name of this Repository.  # noqa: E501
        :type: str
        """

        self._repo_name = repo_name

    @property
    def total_images(self):
        """Gets the total_images of this Repository.  # noqa: E501


        :return: The total_images of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._total_images

    @total_images.setter
    def total_images(self, total_images):
        """Sets the total_images of this Repository.


        :param total_images: The total_images of this Repository.  # noqa: E501
        :type: int
        """

        self._total_images = total_images

    @property
    def total_scanned_images(self):
        """Gets the total_scanned_images of this Repository.  # noqa: E501


        :return: The total_scanned_images of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._total_scanned_images

    @total_scanned_images.setter
    def total_scanned_images(self, total_scanned_images):
        """Sets the total_scanned_images of this Repository.


        :param total_scanned_images: The total_scanned_images of this Repository.  # noqa: E501
        :type: int
        """

        self._total_scanned_images = total_scanned_images

    @property
    def total_vulnerable_images(self):
        """Gets the total_vulnerable_images of this Repository.  # noqa: E501


        :return: The total_vulnerable_images of this Repository.  # noqa: E501
        :rtype: int
        """
        return self._total_vulnerable_images

    @total_vulnerable_images.setter
    def total_vulnerable_images(self, total_vulnerable_images):
        """Sets the total_vulnerable_images of this Repository.


        :param total_vulnerable_images: The total_vulnerable_images of this Repository.  # noqa: E501
        :type: int
        """

        self._total_vulnerable_images = total_vulnerable_images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Repository, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
