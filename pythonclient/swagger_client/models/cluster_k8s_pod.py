# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterK8sPod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'namespace': 'str',
        'label': 'list[ClusterK8sPodLabel]',
        'controller': 'list[ClusterK8sPodController]'
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'namespace': 'namespace',
        'label': 'label',
        'controller': 'controller'
    }

    def __init__(self, name=None, uuid=None, namespace=None, label=None, controller=None):  # noqa: E501
        """ClusterK8sPod - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._uuid = None
        self._namespace = None
        self._label = None
        self._controller = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if namespace is not None:
            self.namespace = namespace
        if label is not None:
            self.label = label
        if controller is not None:
            self.controller = controller

    @property
    def name(self):
        """Gets the name of this ClusterK8sPod.  # noqa: E501


        :return: The name of this ClusterK8sPod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterK8sPod.


        :param name: The name of this ClusterK8sPod.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this ClusterK8sPod.  # noqa: E501


        :return: The uuid of this ClusterK8sPod.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ClusterK8sPod.


        :param uuid: The uuid of this ClusterK8sPod.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def namespace(self):
        """Gets the namespace of this ClusterK8sPod.  # noqa: E501


        :return: The namespace of this ClusterK8sPod.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ClusterK8sPod.


        :param namespace: The namespace of this ClusterK8sPod.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def label(self):
        """Gets the label of this ClusterK8sPod.  # noqa: E501


        :return: The label of this ClusterK8sPod.  # noqa: E501
        :rtype: list[ClusterK8sPodLabel]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ClusterK8sPod.


        :param label: The label of this ClusterK8sPod.  # noqa: E501
        :type: list[ClusterK8sPodLabel]
        """

        self._label = label

    @property
    def controller(self):
        """Gets the controller of this ClusterK8sPod.  # noqa: E501


        :return: The controller of this ClusterK8sPod.  # noqa: E501
        :rtype: list[ClusterK8sPodController]
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this ClusterK8sPod.


        :param controller: The controller of this ClusterK8sPod.  # noqa: E501
        :type: list[ClusterK8sPodController]
        """

        self._controller = controller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterK8sPod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterK8sPod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
