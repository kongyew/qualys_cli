# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegistryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws': 'AwsConnector',
        'credential': 'RegistryRequestCredential',
        'credential_type': 'str',
        'docker_hub_org_name': 'str',
        'registry_type': 'str',
        'registry_uri': 'str',
        'registry_uuid': 'str'
    }

    attribute_map = {
        'aws': 'aws',
        'credential': 'credential',
        'credential_type': 'credentialType',
        'docker_hub_org_name': 'dockerHubOrgName',
        'registry_type': 'registryType',
        'registry_uri': 'registryUri',
        'registry_uuid': 'registryUuid'
    }

    def __init__(self, aws=None, credential=None, credential_type=None, docker_hub_org_name=None, registry_type=None, registry_uri=None, registry_uuid=None):  # noqa: E501
        """RegistryRequest - a model defined in Swagger"""  # noqa: E501
        self._aws = None
        self._credential = None
        self._credential_type = None
        self._docker_hub_org_name = None
        self._registry_type = None
        self._registry_uri = None
        self._registry_uuid = None
        self.discriminator = None
        if aws is not None:
            self.aws = aws
        if credential is not None:
            self.credential = credential
        if credential_type is not None:
            self.credential_type = credential_type
        if docker_hub_org_name is not None:
            self.docker_hub_org_name = docker_hub_org_name
        if registry_type is not None:
            self.registry_type = registry_type
        if registry_uri is not None:
            self.registry_uri = registry_uri
        if registry_uuid is not None:
            self.registry_uuid = registry_uuid

    @property
    def aws(self):
        """Gets the aws of this RegistryRequest.  # noqa: E501


        :return: The aws of this RegistryRequest.  # noqa: E501
        :rtype: AwsConnector
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this RegistryRequest.


        :param aws: The aws of this RegistryRequest.  # noqa: E501
        :type: AwsConnector
        """

        self._aws = aws

    @property
    def credential(self):
        """Gets the credential of this RegistryRequest.  # noqa: E501


        :return: The credential of this RegistryRequest.  # noqa: E501
        :rtype: RegistryRequestCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this RegistryRequest.


        :param credential: The credential of this RegistryRequest.  # noqa: E501
        :type: RegistryRequestCredential
        """

        self._credential = credential

    @property
    def credential_type(self):
        """Gets the credential_type of this RegistryRequest.  # noqa: E501


        :return: The credential_type of this RegistryRequest.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this RegistryRequest.


        :param credential_type: The credential_type of this RegistryRequest.  # noqa: E501
        :type: str
        """

        self._credential_type = credential_type

    @property
    def docker_hub_org_name(self):
        """Gets the docker_hub_org_name of this RegistryRequest.  # noqa: E501


        :return: The docker_hub_org_name of this RegistryRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_hub_org_name

    @docker_hub_org_name.setter
    def docker_hub_org_name(self, docker_hub_org_name):
        """Sets the docker_hub_org_name of this RegistryRequest.


        :param docker_hub_org_name: The docker_hub_org_name of this RegistryRequest.  # noqa: E501
        :type: str
        """

        self._docker_hub_org_name = docker_hub_org_name

    @property
    def registry_type(self):
        """Gets the registry_type of this RegistryRequest.  # noqa: E501


        :return: The registry_type of this RegistryRequest.  # noqa: E501
        :rtype: str
        """
        return self._registry_type

    @registry_type.setter
    def registry_type(self, registry_type):
        """Sets the registry_type of this RegistryRequest.


        :param registry_type: The registry_type of this RegistryRequest.  # noqa: E501
        :type: str
        """

        self._registry_type = registry_type

    @property
    def registry_uri(self):
        """Gets the registry_uri of this RegistryRequest.  # noqa: E501


        :return: The registry_uri of this RegistryRequest.  # noqa: E501
        :rtype: str
        """
        return self._registry_uri

    @registry_uri.setter
    def registry_uri(self, registry_uri):
        """Sets the registry_uri of this RegistryRequest.


        :param registry_uri: The registry_uri of this RegistryRequest.  # noqa: E501
        :type: str
        """

        self._registry_uri = registry_uri

    @property
    def registry_uuid(self):
        """Gets the registry_uuid of this RegistryRequest.  # noqa: E501


        :return: The registry_uuid of this RegistryRequest.  # noqa: E501
        :rtype: str
        """
        return self._registry_uuid

    @registry_uuid.setter
    def registry_uuid(self, registry_uuid):
        """Sets the registry_uuid of this RegistryRequest.


        :param registry_uuid: The registry_uuid of this RegistryRequest.  # noqa: E501
        :type: str
        """

        self._registry_uuid = registry_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
