# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageSoftware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'data': 'list[Software]',
        'drift_software_count_by_drift_reason': 'object',
        'drift_software_count_by_severity': 'object',
        'software_count_by_severity': 'object'
    }

    attribute_map = {
        'count': 'count',
        'data': 'data',
        'drift_software_count_by_drift_reason': 'driftSoftwareCountByDriftReason',
        'drift_software_count_by_severity': 'driftSoftwareCountBySeverity',
        'software_count_by_severity': 'softwareCountBySeverity'
    }

    def __init__(self, count=None, data=None, drift_software_count_by_drift_reason=None, drift_software_count_by_severity=None, software_count_by_severity=None):  # noqa: E501
        """ImageSoftware - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._data = None
        self._drift_software_count_by_drift_reason = None
        self._drift_software_count_by_severity = None
        self._software_count_by_severity = None
        self.discriminator = None
        if count is not None:
            self.count = count
        if data is not None:
            self.data = data
        if drift_software_count_by_drift_reason is not None:
            self.drift_software_count_by_drift_reason = drift_software_count_by_drift_reason
        if drift_software_count_by_severity is not None:
            self.drift_software_count_by_severity = drift_software_count_by_severity
        if software_count_by_severity is not None:
            self.software_count_by_severity = software_count_by_severity

    @property
    def count(self):
        """Gets the count of this ImageSoftware.  # noqa: E501


        :return: The count of this ImageSoftware.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ImageSoftware.


        :param count: The count of this ImageSoftware.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def data(self):
        """Gets the data of this ImageSoftware.  # noqa: E501


        :return: The data of this ImageSoftware.  # noqa: E501
        :rtype: list[Software]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ImageSoftware.


        :param data: The data of this ImageSoftware.  # noqa: E501
        :type: list[Software]
        """

        self._data = data

    @property
    def drift_software_count_by_drift_reason(self):
        """Gets the drift_software_count_by_drift_reason of this ImageSoftware.  # noqa: E501


        :return: The drift_software_count_by_drift_reason of this ImageSoftware.  # noqa: E501
        :rtype: object
        """
        return self._drift_software_count_by_drift_reason

    @drift_software_count_by_drift_reason.setter
    def drift_software_count_by_drift_reason(self, drift_software_count_by_drift_reason):
        """Sets the drift_software_count_by_drift_reason of this ImageSoftware.


        :param drift_software_count_by_drift_reason: The drift_software_count_by_drift_reason of this ImageSoftware.  # noqa: E501
        :type: object
        """

        self._drift_software_count_by_drift_reason = drift_software_count_by_drift_reason

    @property
    def drift_software_count_by_severity(self):
        """Gets the drift_software_count_by_severity of this ImageSoftware.  # noqa: E501


        :return: The drift_software_count_by_severity of this ImageSoftware.  # noqa: E501
        :rtype: object
        """
        return self._drift_software_count_by_severity

    @drift_software_count_by_severity.setter
    def drift_software_count_by_severity(self, drift_software_count_by_severity):
        """Sets the drift_software_count_by_severity of this ImageSoftware.


        :param drift_software_count_by_severity: The drift_software_count_by_severity of this ImageSoftware.  # noqa: E501
        :type: object
        """

        self._drift_software_count_by_severity = drift_software_count_by_severity

    @property
    def software_count_by_severity(self):
        """Gets the software_count_by_severity of this ImageSoftware.  # noqa: E501


        :return: The software_count_by_severity of this ImageSoftware.  # noqa: E501
        :rtype: object
        """
        return self._software_count_by_severity

    @software_count_by_severity.setter
    def software_count_by_severity(self, software_count_by_severity):
        """Sets the software_count_by_severity of this ImageSoftware.


        :param software_count_by_severity: The software_count_by_severity of this ImageSoftware.  # noqa: E501
        :type: object
        """

        self._software_count_by_severity = software_count_by_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageSoftware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageSoftware):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
