# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vulnerability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_type': 'list[str]',
        'category': 'str',
        'container_result': 'str',
        'customer_severity': 'str',
        'cveids': 'list[str]',
        'cvss3_info': 'Cvss3Info',
        'cvss_info': 'CvssInfo',
        'discovery_type': 'list[str]',
        'first_found': 'str',
        'image_result': 'str',
        'last_found': 'str',
        'patch_available': 'bool',
        'port': 'str',
        'product': 'list[str]',
        'published': 'int',
        'qid': 'int',
        'result': 'str',
        'risk': 'int',
        'severity': 'int',
        'software': 'list[Software]',
        'source': 'str',
        'status': 'str',
        'supported_by': 'list[str]',
        'threat_intel': 'ThreatIntel',
        'title': 'str',
        'type_detected': 'str',
        'vendor': 'list[str]',
        'vulnerability': 'int'
    }

    attribute_map = {
        'auth_type': 'authType',
        'category': 'category',
        'container_result': 'containerResult',
        'customer_severity': 'customerSeverity',
        'cveids': 'cveids',
        'cvss3_info': 'cvss3Info',
        'cvss_info': 'cvssInfo',
        'discovery_type': 'discoveryType',
        'first_found': 'firstFound',
        'image_result': 'imageResult',
        'last_found': 'lastFound',
        'patch_available': 'patchAvailable',
        'port': 'port',
        'product': 'product',
        'published': 'published',
        'qid': 'qid',
        'result': 'result',
        'risk': 'risk',
        'severity': 'severity',
        'software': 'software',
        'source': 'source',
        'status': 'status',
        'supported_by': 'supportedBy',
        'threat_intel': 'threatIntel',
        'title': 'title',
        'type_detected': 'typeDetected',
        'vendor': 'vendor',
        'vulnerability': 'vulnerability'
    }

    def __init__(self, auth_type=None, category=None, container_result=None, customer_severity=None, cveids=None, cvss3_info=None, cvss_info=None, discovery_type=None, first_found=None, image_result=None, last_found=None, patch_available=None, port=None, product=None, published=None, qid=None, result=None, risk=None, severity=None, software=None, source=None, status=None, supported_by=None, threat_intel=None, title=None, type_detected=None, vendor=None, vulnerability=None):  # noqa: E501
        """Vulnerability - a model defined in Swagger"""  # noqa: E501
        self._auth_type = None
        self._category = None
        self._container_result = None
        self._customer_severity = None
        self._cveids = None
        self._cvss3_info = None
        self._cvss_info = None
        self._discovery_type = None
        self._first_found = None
        self._image_result = None
        self._last_found = None
        self._patch_available = None
        self._port = None
        self._product = None
        self._published = None
        self._qid = None
        self._result = None
        self._risk = None
        self._severity = None
        self._software = None
        self._source = None
        self._status = None
        self._supported_by = None
        self._threat_intel = None
        self._title = None
        self._type_detected = None
        self._vendor = None
        self._vulnerability = None
        self.discriminator = None
        if auth_type is not None:
            self.auth_type = auth_type
        if category is not None:
            self.category = category
        if container_result is not None:
            self.container_result = container_result
        if customer_severity is not None:
            self.customer_severity = customer_severity
        if cveids is not None:
            self.cveids = cveids
        if cvss3_info is not None:
            self.cvss3_info = cvss3_info
        if cvss_info is not None:
            self.cvss_info = cvss_info
        if discovery_type is not None:
            self.discovery_type = discovery_type
        if first_found is not None:
            self.first_found = first_found
        if image_result is not None:
            self.image_result = image_result
        if last_found is not None:
            self.last_found = last_found
        if patch_available is not None:
            self.patch_available = patch_available
        if port is not None:
            self.port = port
        if product is not None:
            self.product = product
        if published is not None:
            self.published = published
        if qid is not None:
            self.qid = qid
        if result is not None:
            self.result = result
        if risk is not None:
            self.risk = risk
        if severity is not None:
            self.severity = severity
        if software is not None:
            self.software = software
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if supported_by is not None:
            self.supported_by = supported_by
        if threat_intel is not None:
            self.threat_intel = threat_intel
        if title is not None:
            self.title = title
        if type_detected is not None:
            self.type_detected = type_detected
        if vendor is not None:
            self.vendor = vendor
        if vulnerability is not None:
            self.vulnerability = vulnerability

    @property
    def auth_type(self):
        """Gets the auth_type of this Vulnerability.  # noqa: E501


        :return: The auth_type of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Vulnerability.


        :param auth_type: The auth_type of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._auth_type = auth_type

    @property
    def category(self):
        """Gets the category of this Vulnerability.  # noqa: E501


        :return: The category of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Vulnerability.


        :param category: The category of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def container_result(self):
        """Gets the container_result of this Vulnerability.  # noqa: E501


        :return: The container_result of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._container_result

    @container_result.setter
    def container_result(self, container_result):
        """Sets the container_result of this Vulnerability.


        :param container_result: The container_result of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._container_result = container_result

    @property
    def customer_severity(self):
        """Gets the customer_severity of this Vulnerability.  # noqa: E501


        :return: The customer_severity of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._customer_severity

    @customer_severity.setter
    def customer_severity(self, customer_severity):
        """Sets the customer_severity of this Vulnerability.


        :param customer_severity: The customer_severity of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._customer_severity = customer_severity

    @property
    def cveids(self):
        """Gets the cveids of this Vulnerability.  # noqa: E501


        :return: The cveids of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._cveids

    @cveids.setter
    def cveids(self, cveids):
        """Sets the cveids of this Vulnerability.


        :param cveids: The cveids of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._cveids = cveids

    @property
    def cvss3_info(self):
        """Gets the cvss3_info of this Vulnerability.  # noqa: E501


        :return: The cvss3_info of this Vulnerability.  # noqa: E501
        :rtype: Cvss3Info
        """
        return self._cvss3_info

    @cvss3_info.setter
    def cvss3_info(self, cvss3_info):
        """Sets the cvss3_info of this Vulnerability.


        :param cvss3_info: The cvss3_info of this Vulnerability.  # noqa: E501
        :type: Cvss3Info
        """

        self._cvss3_info = cvss3_info

    @property
    def cvss_info(self):
        """Gets the cvss_info of this Vulnerability.  # noqa: E501


        :return: The cvss_info of this Vulnerability.  # noqa: E501
        :rtype: CvssInfo
        """
        return self._cvss_info

    @cvss_info.setter
    def cvss_info(self, cvss_info):
        """Sets the cvss_info of this Vulnerability.


        :param cvss_info: The cvss_info of this Vulnerability.  # noqa: E501
        :type: CvssInfo
        """

        self._cvss_info = cvss_info

    @property
    def discovery_type(self):
        """Gets the discovery_type of this Vulnerability.  # noqa: E501


        :return: The discovery_type of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._discovery_type

    @discovery_type.setter
    def discovery_type(self, discovery_type):
        """Sets the discovery_type of this Vulnerability.


        :param discovery_type: The discovery_type of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._discovery_type = discovery_type

    @property
    def first_found(self):
        """Gets the first_found of this Vulnerability.  # noqa: E501


        :return: The first_found of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._first_found

    @first_found.setter
    def first_found(self, first_found):
        """Sets the first_found of this Vulnerability.


        :param first_found: The first_found of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._first_found = first_found

    @property
    def image_result(self):
        """Gets the image_result of this Vulnerability.  # noqa: E501


        :return: The image_result of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._image_result

    @image_result.setter
    def image_result(self, image_result):
        """Sets the image_result of this Vulnerability.


        :param image_result: The image_result of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._image_result = image_result

    @property
    def last_found(self):
        """Gets the last_found of this Vulnerability.  # noqa: E501


        :return: The last_found of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._last_found

    @last_found.setter
    def last_found(self, last_found):
        """Sets the last_found of this Vulnerability.


        :param last_found: The last_found of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._last_found = last_found

    @property
    def patch_available(self):
        """Gets the patch_available of this Vulnerability.  # noqa: E501


        :return: The patch_available of this Vulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._patch_available

    @patch_available.setter
    def patch_available(self, patch_available):
        """Sets the patch_available of this Vulnerability.


        :param patch_available: The patch_available of this Vulnerability.  # noqa: E501
        :type: bool
        """

        self._patch_available = patch_available

    @property
    def port(self):
        """Gets the port of this Vulnerability.  # noqa: E501


        :return: The port of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Vulnerability.


        :param port: The port of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def product(self):
        """Gets the product of this Vulnerability.  # noqa: E501


        :return: The product of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Vulnerability.


        :param product: The product of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._product = product

    @property
    def published(self):
        """Gets the published of this Vulnerability.  # noqa: E501


        :return: The published of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Vulnerability.


        :param published: The published of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._published = published

    @property
    def qid(self):
        """Gets the qid of this Vulnerability.  # noqa: E501


        :return: The qid of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._qid

    @qid.setter
    def qid(self, qid):
        """Sets the qid of this Vulnerability.


        :param qid: The qid of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._qid = qid

    @property
    def result(self):
        """Gets the result of this Vulnerability.  # noqa: E501


        :return: The result of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Vulnerability.


        :param result: The result of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def risk(self):
        """Gets the risk of this Vulnerability.  # noqa: E501


        :return: The risk of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this Vulnerability.


        :param risk: The risk of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._risk = risk

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.  # noqa: E501


        :return: The severity of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.


        :param severity: The severity of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def software(self):
        """Gets the software of this Vulnerability.  # noqa: E501


        :return: The software of this Vulnerability.  # noqa: E501
        :rtype: list[Software]
        """
        return self._software

    @software.setter
    def software(self, software):
        """Sets the software of this Vulnerability.


        :param software: The software of this Vulnerability.  # noqa: E501
        :type: list[Software]
        """

        self._software = software

    @property
    def source(self):
        """Gets the source of this Vulnerability.  # noqa: E501


        :return: The source of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Vulnerability.


        :param source: The source of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Vulnerability.  # noqa: E501


        :return: The status of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Vulnerability.


        :param status: The status of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def supported_by(self):
        """Gets the supported_by of this Vulnerability.  # noqa: E501


        :return: The supported_by of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_by

    @supported_by.setter
    def supported_by(self, supported_by):
        """Sets the supported_by of this Vulnerability.


        :param supported_by: The supported_by of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._supported_by = supported_by

    @property
    def threat_intel(self):
        """Gets the threat_intel of this Vulnerability.  # noqa: E501


        :return: The threat_intel of this Vulnerability.  # noqa: E501
        :rtype: ThreatIntel
        """
        return self._threat_intel

    @threat_intel.setter
    def threat_intel(self, threat_intel):
        """Sets the threat_intel of this Vulnerability.


        :param threat_intel: The threat_intel of this Vulnerability.  # noqa: E501
        :type: ThreatIntel
        """

        self._threat_intel = threat_intel

    @property
    def title(self):
        """Gets the title of this Vulnerability.  # noqa: E501


        :return: The title of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Vulnerability.


        :param title: The title of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type_detected(self):
        """Gets the type_detected of this Vulnerability.  # noqa: E501


        :return: The type_detected of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._type_detected

    @type_detected.setter
    def type_detected(self, type_detected):
        """Sets the type_detected of this Vulnerability.


        :param type_detected: The type_detected of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._type_detected = type_detected

    @property
    def vendor(self):
        """Gets the vendor of this Vulnerability.  # noqa: E501


        :return: The vendor of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this Vulnerability.


        :param vendor: The vendor of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._vendor = vendor

    @property
    def vulnerability(self):
        """Gets the vulnerability of this Vulnerability.  # noqa: E501


        :return: The vulnerability of this Vulnerability.  # noqa: E501
        :rtype: int
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this Vulnerability.


        :param vulnerability: The vulnerability of this Vulnerability.  # noqa: E501
        :type: int
        """

        self._vulnerability = vulnerability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vulnerability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vulnerability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
