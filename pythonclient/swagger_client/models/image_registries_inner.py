# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageRegistriesInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'registry': 'str',
        'registry_uuid': 'str',
        'repo': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'registry': 'registry',
        'registry_uuid': 'registryUuid',
        'repo': 'repo',
        'tag': 'tag'
    }

    def __init__(self, registry=None, registry_uuid=None, repo=None, tag=None):  # noqa: E501
        """ImageRegistriesInner - a model defined in Swagger"""  # noqa: E501
        self._registry = None
        self._registry_uuid = None
        self._repo = None
        self._tag = None
        self.discriminator = None
        if registry is not None:
            self.registry = registry
        if registry_uuid is not None:
            self.registry_uuid = registry_uuid
        if repo is not None:
            self.repo = repo
        if tag is not None:
            self.tag = tag

    @property
    def registry(self):
        """Gets the registry of this ImageRegistriesInner.  # noqa: E501


        :return: The registry of this ImageRegistriesInner.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this ImageRegistriesInner.


        :param registry: The registry of this ImageRegistriesInner.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def registry_uuid(self):
        """Gets the registry_uuid of this ImageRegistriesInner.  # noqa: E501


        :return: The registry_uuid of this ImageRegistriesInner.  # noqa: E501
        :rtype: str
        """
        return self._registry_uuid

    @registry_uuid.setter
    def registry_uuid(self, registry_uuid):
        """Sets the registry_uuid of this ImageRegistriesInner.


        :param registry_uuid: The registry_uuid of this ImageRegistriesInner.  # noqa: E501
        :type: str
        """

        self._registry_uuid = registry_uuid

    @property
    def repo(self):
        """Gets the repo of this ImageRegistriesInner.  # noqa: E501


        :return: The repo of this ImageRegistriesInner.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this ImageRegistriesInner.


        :param repo: The repo of this ImageRegistriesInner.  # noqa: E501
        :type: str
        """

        self._repo = repo

    @property
    def tag(self):
        """Gets the tag of this ImageRegistriesInner.  # noqa: E501


        :return: The tag of this ImageRegistriesInner.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ImageRegistriesInner.


        :param tag: The tag of this ImageRegistriesInner.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageRegistriesInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageRegistriesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
