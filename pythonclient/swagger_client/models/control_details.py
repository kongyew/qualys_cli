# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ControlDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'control_id': 'int',
        'policy_uuid': 'str',
        'technology_id': 'int',
        'criticality': 'str',
        'posture': 'str',
        'last_evaluated': 'str',
        'datapoints': 'list[Datapoints]'
    }

    attribute_map = {
        'control_id': 'controlId',
        'policy_uuid': 'policyUuid',
        'technology_id': 'technologyId',
        'criticality': 'criticality',
        'posture': 'posture',
        'last_evaluated': 'lastEvaluated',
        'datapoints': 'datapoints'
    }

    def __init__(self, control_id=None, policy_uuid=None, technology_id=None, criticality=None, posture=None, last_evaluated=None, datapoints=None):  # noqa: E501
        """ControlDetails - a model defined in Swagger"""  # noqa: E501
        self._control_id = None
        self._policy_uuid = None
        self._technology_id = None
        self._criticality = None
        self._posture = None
        self._last_evaluated = None
        self._datapoints = None
        self.discriminator = None
        if control_id is not None:
            self.control_id = control_id
        if policy_uuid is not None:
            self.policy_uuid = policy_uuid
        if technology_id is not None:
            self.technology_id = technology_id
        if criticality is not None:
            self.criticality = criticality
        if posture is not None:
            self.posture = posture
        if last_evaluated is not None:
            self.last_evaluated = last_evaluated
        if datapoints is not None:
            self.datapoints = datapoints

    @property
    def control_id(self):
        """Gets the control_id of this ControlDetails.  # noqa: E501


        :return: The control_id of this ControlDetails.  # noqa: E501
        :rtype: int
        """
        return self._control_id

    @control_id.setter
    def control_id(self, control_id):
        """Sets the control_id of this ControlDetails.


        :param control_id: The control_id of this ControlDetails.  # noqa: E501
        :type: int
        """

        self._control_id = control_id

    @property
    def policy_uuid(self):
        """Gets the policy_uuid of this ControlDetails.  # noqa: E501


        :return: The policy_uuid of this ControlDetails.  # noqa: E501
        :rtype: str
        """
        return self._policy_uuid

    @policy_uuid.setter
    def policy_uuid(self, policy_uuid):
        """Sets the policy_uuid of this ControlDetails.


        :param policy_uuid: The policy_uuid of this ControlDetails.  # noqa: E501
        :type: str
        """

        self._policy_uuid = policy_uuid

    @property
    def technology_id(self):
        """Gets the technology_id of this ControlDetails.  # noqa: E501


        :return: The technology_id of this ControlDetails.  # noqa: E501
        :rtype: int
        """
        return self._technology_id

    @technology_id.setter
    def technology_id(self, technology_id):
        """Sets the technology_id of this ControlDetails.


        :param technology_id: The technology_id of this ControlDetails.  # noqa: E501
        :type: int
        """

        self._technology_id = technology_id

    @property
    def criticality(self):
        """Gets the criticality of this ControlDetails.  # noqa: E501


        :return: The criticality of this ControlDetails.  # noqa: E501
        :rtype: str
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality):
        """Sets the criticality of this ControlDetails.


        :param criticality: The criticality of this ControlDetails.  # noqa: E501
        :type: str
        """

        self._criticality = criticality

    @property
    def posture(self):
        """Gets the posture of this ControlDetails.  # noqa: E501


        :return: The posture of this ControlDetails.  # noqa: E501
        :rtype: str
        """
        return self._posture

    @posture.setter
    def posture(self, posture):
        """Sets the posture of this ControlDetails.


        :param posture: The posture of this ControlDetails.  # noqa: E501
        :type: str
        """

        self._posture = posture

    @property
    def last_evaluated(self):
        """Gets the last_evaluated of this ControlDetails.  # noqa: E501


        :return: The last_evaluated of this ControlDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_evaluated

    @last_evaluated.setter
    def last_evaluated(self, last_evaluated):
        """Sets the last_evaluated of this ControlDetails.


        :param last_evaluated: The last_evaluated of this ControlDetails.  # noqa: E501
        :type: str
        """

        self._last_evaluated = last_evaluated

    @property
    def datapoints(self):
        """Gets the datapoints of this ControlDetails.  # noqa: E501


        :return: The datapoints of this ControlDetails.  # noqa: E501
        :rtype: list[Datapoints]
        """
        return self._datapoints

    @datapoints.setter
    def datapoints(self, datapoints):
        """Sets the datapoints of this ControlDetails.


        :param datapoints: The datapoints of this ControlDetails.  # noqa: E501
        :type: list[Datapoints]
        """

        self._datapoints = datapoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControlDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
