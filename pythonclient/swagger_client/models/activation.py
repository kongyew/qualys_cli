# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Activation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'str',
        'activation_id': 'str',
        'platform_url': 'str'
    }

    attribute_map = {
        'customer_id': 'customerId',
        'activation_id': 'activationId',
        'platform_url': 'platformUrl'
    }

    def __init__(self, customer_id=None, activation_id=None, platform_url=None):  # noqa: E501
        """Activation - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._activation_id = None
        self._platform_url = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        if activation_id is not None:
            self.activation_id = activation_id
        if platform_url is not None:
            self.platform_url = platform_url

    @property
    def customer_id(self):
        """Gets the customer_id of this Activation.  # noqa: E501


        :return: The customer_id of this Activation.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Activation.


        :param customer_id: The customer_id of this Activation.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def activation_id(self):
        """Gets the activation_id of this Activation.  # noqa: E501


        :return: The activation_id of this Activation.  # noqa: E501
        :rtype: str
        """
        return self._activation_id

    @activation_id.setter
    def activation_id(self, activation_id):
        """Sets the activation_id of this Activation.


        :param activation_id: The activation_id of this Activation.  # noqa: E501
        :type: str
        """

        self._activation_id = activation_id

    @property
    def platform_url(self):
        """Gets the platform_url of this Activation.  # noqa: E501


        :return: The platform_url of this Activation.  # noqa: E501
        :rtype: str
        """
        return self._platform_url

    @platform_url.setter
    def platform_url(self, platform_url):
        """Sets the platform_url of this Activation.


        :param platform_url: The platform_url of this Activation.  # noqa: E501
        :type: str
        """

        self._platform_url = platform_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Activation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
