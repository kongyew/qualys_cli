# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduleErrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_params': 'object',
        'error_code': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'context_params': 'contextParams',
        'error_code': 'errorCode',
        'error_message': 'errorMessage'
    }

    def __init__(self, context_params=None, error_code=None, error_message=None):  # noqa: E501
        """ScheduleErrors - a model defined in Swagger"""  # noqa: E501
        self._context_params = None
        self._error_code = None
        self._error_message = None
        self.discriminator = None
        if context_params is not None:
            self.context_params = context_params
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message

    @property
    def context_params(self):
        """Gets the context_params of this ScheduleErrors.  # noqa: E501


        :return: The context_params of this ScheduleErrors.  # noqa: E501
        :rtype: object
        """
        return self._context_params

    @context_params.setter
    def context_params(self, context_params):
        """Sets the context_params of this ScheduleErrors.


        :param context_params: The context_params of this ScheduleErrors.  # noqa: E501
        :type: object
        """

        self._context_params = context_params

    @property
    def error_code(self):
        """Gets the error_code of this ScheduleErrors.  # noqa: E501


        :return: The error_code of this ScheduleErrors.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ScheduleErrors.


        :param error_code: The error_code of this ScheduleErrors.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ScheduleErrors.  # noqa: E501


        :return: The error_message of this ScheduleErrors.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ScheduleErrors.


        :param error_message: The error_message of this ScheduleErrors.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
