# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AcrConnectorRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'client_secret': 'str',
        'connector_id': 'str',
        'description': 'str',
        'application_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'client_secret': 'clientSecret',
        'connector_id': 'connectorId',
        'description': 'description',
        'application_id': 'applicationId'
    }

    def __init__(self, name=None, client_secret=None, connector_id=None, description=None, application_id=None):  # noqa: E501
        """AcrConnectorRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._client_secret = None
        self._connector_id = None
        self._description = None
        self._application_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if client_secret is not None:
            self.client_secret = client_secret
        if connector_id is not None:
            self.connector_id = connector_id
        if description is not None:
            self.description = description
        if application_id is not None:
            self.application_id = application_id

    @property
    def name(self):
        """Gets the name of this AcrConnectorRequest.  # noqa: E501


        :return: The name of this AcrConnectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AcrConnectorRequest.


        :param name: The name of this AcrConnectorRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client_secret(self):
        """Gets the client_secret of this AcrConnectorRequest.  # noqa: E501


        :return: The client_secret of this AcrConnectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AcrConnectorRequest.


        :param client_secret: The client_secret of this AcrConnectorRequest.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def connector_id(self):
        """Gets the connector_id of this AcrConnectorRequest.  # noqa: E501


        :return: The connector_id of this AcrConnectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this AcrConnectorRequest.


        :param connector_id: The connector_id of this AcrConnectorRequest.  # noqa: E501
        :type: str
        """

        self._connector_id = connector_id

    @property
    def description(self):
        """Gets the description of this AcrConnectorRequest.  # noqa: E501


        :return: The description of this AcrConnectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AcrConnectorRequest.


        :param description: The description of this AcrConnectorRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def application_id(self):
        """Gets the application_id of this AcrConnectorRequest.  # noqa: E501


        :return: The application_id of this AcrConnectorRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AcrConnectorRequest.


        :param application_id: The application_id of this AcrConnectorRequest.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AcrConnectorRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AcrConnectorRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
