# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImageAssociationHosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_container_count': 'int',
        'created_container_count_for_associated_image': 'int',
        'hostname': 'str',
        'ip_address': 'str',
        'paused_container_count': 'int',
        'paused_container_count_for_associated_image': 'int',
        'running_container_count': 'int',
        'running_container_count_for_associated_image': 'int',
        'sensor_uuid': 'str',
        'stopped_container_count': 'int',
        'stopped_container_count_for_associated_image': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'created_container_count': 'createdContainerCount',
        'created_container_count_for_associated_image': 'createdContainerCountForAssociatedImage',
        'hostname': 'hostname',
        'ip_address': 'ipAddress',
        'paused_container_count': 'pausedContainerCount',
        'paused_container_count_for_associated_image': 'pausedContainerCountForAssociatedImage',
        'running_container_count': 'runningContainerCount',
        'running_container_count_for_associated_image': 'runningContainerCountForAssociatedImage',
        'sensor_uuid': 'sensorUuid',
        'stopped_container_count': 'stoppedContainerCount',
        'stopped_container_count_for_associated_image': 'stoppedContainerCountForAssociatedImage',
        'uuid': 'uuid'
    }

    def __init__(self, created_container_count=None, created_container_count_for_associated_image=None, hostname=None, ip_address=None, paused_container_count=None, paused_container_count_for_associated_image=None, running_container_count=None, running_container_count_for_associated_image=None, sensor_uuid=None, stopped_container_count=None, stopped_container_count_for_associated_image=None, uuid=None):  # noqa: E501
        """ImageAssociationHosts - a model defined in Swagger"""  # noqa: E501
        self._created_container_count = None
        self._created_container_count_for_associated_image = None
        self._hostname = None
        self._ip_address = None
        self._paused_container_count = None
        self._paused_container_count_for_associated_image = None
        self._running_container_count = None
        self._running_container_count_for_associated_image = None
        self._sensor_uuid = None
        self._stopped_container_count = None
        self._stopped_container_count_for_associated_image = None
        self._uuid = None
        self.discriminator = None
        if created_container_count is not None:
            self.created_container_count = created_container_count
        if created_container_count_for_associated_image is not None:
            self.created_container_count_for_associated_image = created_container_count_for_associated_image
        if hostname is not None:
            self.hostname = hostname
        if ip_address is not None:
            self.ip_address = ip_address
        if paused_container_count is not None:
            self.paused_container_count = paused_container_count
        if paused_container_count_for_associated_image is not None:
            self.paused_container_count_for_associated_image = paused_container_count_for_associated_image
        if running_container_count is not None:
            self.running_container_count = running_container_count
        if running_container_count_for_associated_image is not None:
            self.running_container_count_for_associated_image = running_container_count_for_associated_image
        if sensor_uuid is not None:
            self.sensor_uuid = sensor_uuid
        if stopped_container_count is not None:
            self.stopped_container_count = stopped_container_count
        if stopped_container_count_for_associated_image is not None:
            self.stopped_container_count_for_associated_image = stopped_container_count_for_associated_image
        if uuid is not None:
            self.uuid = uuid

    @property
    def created_container_count(self):
        """Gets the created_container_count of this ImageAssociationHosts.  # noqa: E501


        :return: The created_container_count of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._created_container_count

    @created_container_count.setter
    def created_container_count(self, created_container_count):
        """Sets the created_container_count of this ImageAssociationHosts.


        :param created_container_count: The created_container_count of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._created_container_count = created_container_count

    @property
    def created_container_count_for_associated_image(self):
        """Gets the created_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501


        :return: The created_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._created_container_count_for_associated_image

    @created_container_count_for_associated_image.setter
    def created_container_count_for_associated_image(self, created_container_count_for_associated_image):
        """Sets the created_container_count_for_associated_image of this ImageAssociationHosts.


        :param created_container_count_for_associated_image: The created_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._created_container_count_for_associated_image = created_container_count_for_associated_image

    @property
    def hostname(self):
        """Gets the hostname of this ImageAssociationHosts.  # noqa: E501


        :return: The hostname of this ImageAssociationHosts.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ImageAssociationHosts.


        :param hostname: The hostname of this ImageAssociationHosts.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ip_address(self):
        """Gets the ip_address of this ImageAssociationHosts.  # noqa: E501


        :return: The ip_address of this ImageAssociationHosts.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ImageAssociationHosts.


        :param ip_address: The ip_address of this ImageAssociationHosts.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def paused_container_count(self):
        """Gets the paused_container_count of this ImageAssociationHosts.  # noqa: E501


        :return: The paused_container_count of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._paused_container_count

    @paused_container_count.setter
    def paused_container_count(self, paused_container_count):
        """Sets the paused_container_count of this ImageAssociationHosts.


        :param paused_container_count: The paused_container_count of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._paused_container_count = paused_container_count

    @property
    def paused_container_count_for_associated_image(self):
        """Gets the paused_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501


        :return: The paused_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._paused_container_count_for_associated_image

    @paused_container_count_for_associated_image.setter
    def paused_container_count_for_associated_image(self, paused_container_count_for_associated_image):
        """Sets the paused_container_count_for_associated_image of this ImageAssociationHosts.


        :param paused_container_count_for_associated_image: The paused_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._paused_container_count_for_associated_image = paused_container_count_for_associated_image

    @property
    def running_container_count(self):
        """Gets the running_container_count of this ImageAssociationHosts.  # noqa: E501


        :return: The running_container_count of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._running_container_count

    @running_container_count.setter
    def running_container_count(self, running_container_count):
        """Sets the running_container_count of this ImageAssociationHosts.


        :param running_container_count: The running_container_count of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._running_container_count = running_container_count

    @property
    def running_container_count_for_associated_image(self):
        """Gets the running_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501


        :return: The running_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._running_container_count_for_associated_image

    @running_container_count_for_associated_image.setter
    def running_container_count_for_associated_image(self, running_container_count_for_associated_image):
        """Sets the running_container_count_for_associated_image of this ImageAssociationHosts.


        :param running_container_count_for_associated_image: The running_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._running_container_count_for_associated_image = running_container_count_for_associated_image

    @property
    def sensor_uuid(self):
        """Gets the sensor_uuid of this ImageAssociationHosts.  # noqa: E501


        :return: The sensor_uuid of this ImageAssociationHosts.  # noqa: E501
        :rtype: str
        """
        return self._sensor_uuid

    @sensor_uuid.setter
    def sensor_uuid(self, sensor_uuid):
        """Sets the sensor_uuid of this ImageAssociationHosts.


        :param sensor_uuid: The sensor_uuid of this ImageAssociationHosts.  # noqa: E501
        :type: str
        """

        self._sensor_uuid = sensor_uuid

    @property
    def stopped_container_count(self):
        """Gets the stopped_container_count of this ImageAssociationHosts.  # noqa: E501


        :return: The stopped_container_count of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._stopped_container_count

    @stopped_container_count.setter
    def stopped_container_count(self, stopped_container_count):
        """Sets the stopped_container_count of this ImageAssociationHosts.


        :param stopped_container_count: The stopped_container_count of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._stopped_container_count = stopped_container_count

    @property
    def stopped_container_count_for_associated_image(self):
        """Gets the stopped_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501


        :return: The stopped_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :rtype: int
        """
        return self._stopped_container_count_for_associated_image

    @stopped_container_count_for_associated_image.setter
    def stopped_container_count_for_associated_image(self, stopped_container_count_for_associated_image):
        """Sets the stopped_container_count_for_associated_image of this ImageAssociationHosts.


        :param stopped_container_count_for_associated_image: The stopped_container_count_for_associated_image of this ImageAssociationHosts.  # noqa: E501
        :type: int
        """

        self._stopped_container_count_for_associated_image = stopped_container_count_for_associated_image

    @property
    def uuid(self):
        """Gets the uuid of this ImageAssociationHosts.  # noqa: E501


        :return: The uuid of this ImageAssociationHosts.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ImageAssociationHosts.


        :param uuid: The uuid of this ImageAssociationHosts.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImageAssociationHosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageAssociationHosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
