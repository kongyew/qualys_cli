# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Registry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_account_id': 'str',
        'aws_region': 'str',
        'created': 'str',
        'docker_hub_org': 'str',
        'last_scanned': 'str',
        'provider_type': 'str',
        'registry_type': 'str',
        'registry_uri': 'str',
        'registry_uuid': 'str',
        'repo_count': 'int',
        'schedule_status_list': 'object',
        'total_images': 'int',
        'total_scanned_images': 'int',
        'total_vulnerable_images': 'int',
        'updated': 'str'
    }

    attribute_map = {
        'aws_account_id': 'awsAccountId',
        'aws_region': 'awsRegion',
        'created': 'created',
        'docker_hub_org': 'dockerHubOrg',
        'last_scanned': 'lastScanned',
        'provider_type': 'providerType',
        'registry_type': 'registryType',
        'registry_uri': 'registryUri',
        'registry_uuid': 'registryUuid',
        'repo_count': 'repoCount',
        'schedule_status_list': 'scheduleStatusList',
        'total_images': 'totalImages',
        'total_scanned_images': 'totalScannedImages',
        'total_vulnerable_images': 'totalVulnerableImages',
        'updated': 'updated'
    }

    def __init__(self, aws_account_id=None, aws_region=None, created=None, docker_hub_org=None, last_scanned=None, provider_type=None, registry_type=None, registry_uri=None, registry_uuid=None, repo_count=None, schedule_status_list=None, total_images=None, total_scanned_images=None, total_vulnerable_images=None, updated=None):  # noqa: E501
        """Registry - a model defined in Swagger"""  # noqa: E501
        self._aws_account_id = None
        self._aws_region = None
        self._created = None
        self._docker_hub_org = None
        self._last_scanned = None
        self._provider_type = None
        self._registry_type = None
        self._registry_uri = None
        self._registry_uuid = None
        self._repo_count = None
        self._schedule_status_list = None
        self._total_images = None
        self._total_scanned_images = None
        self._total_vulnerable_images = None
        self._updated = None
        self.discriminator = None
        if aws_account_id is not None:
            self.aws_account_id = aws_account_id
        if aws_region is not None:
            self.aws_region = aws_region
        if created is not None:
            self.created = created
        if docker_hub_org is not None:
            self.docker_hub_org = docker_hub_org
        if last_scanned is not None:
            self.last_scanned = last_scanned
        if provider_type is not None:
            self.provider_type = provider_type
        if registry_type is not None:
            self.registry_type = registry_type
        if registry_uri is not None:
            self.registry_uri = registry_uri
        if registry_uuid is not None:
            self.registry_uuid = registry_uuid
        if repo_count is not None:
            self.repo_count = repo_count
        if schedule_status_list is not None:
            self.schedule_status_list = schedule_status_list
        if total_images is not None:
            self.total_images = total_images
        if total_scanned_images is not None:
            self.total_scanned_images = total_scanned_images
        if total_vulnerable_images is not None:
            self.total_vulnerable_images = total_vulnerable_images
        if updated is not None:
            self.updated = updated

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this Registry.  # noqa: E501


        :return: The aws_account_id of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this Registry.


        :param aws_account_id: The aws_account_id of this Registry.  # noqa: E501
        :type: str
        """

        self._aws_account_id = aws_account_id

    @property
    def aws_region(self):
        """Gets the aws_region of this Registry.  # noqa: E501


        :return: The aws_region of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this Registry.


        :param aws_region: The aws_region of this Registry.  # noqa: E501
        :type: str
        """

        self._aws_region = aws_region

    @property
    def created(self):
        """Gets the created of this Registry.  # noqa: E501


        :return: The created of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Registry.


        :param created: The created of this Registry.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def docker_hub_org(self):
        """Gets the docker_hub_org of this Registry.  # noqa: E501


        :return: The docker_hub_org of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._docker_hub_org

    @docker_hub_org.setter
    def docker_hub_org(self, docker_hub_org):
        """Sets the docker_hub_org of this Registry.


        :param docker_hub_org: The docker_hub_org of this Registry.  # noqa: E501
        :type: str
        """

        self._docker_hub_org = docker_hub_org

    @property
    def last_scanned(self):
        """Gets the last_scanned of this Registry.  # noqa: E501


        :return: The last_scanned of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._last_scanned

    @last_scanned.setter
    def last_scanned(self, last_scanned):
        """Sets the last_scanned of this Registry.


        :param last_scanned: The last_scanned of this Registry.  # noqa: E501
        :type: str
        """

        self._last_scanned = last_scanned

    @property
    def provider_type(self):
        """Gets the provider_type of this Registry.  # noqa: E501


        :return: The provider_type of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this Registry.


        :param provider_type: The provider_type of this Registry.  # noqa: E501
        :type: str
        """

        self._provider_type = provider_type

    @property
    def registry_type(self):
        """Gets the registry_type of this Registry.  # noqa: E501


        :return: The registry_type of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._registry_type

    @registry_type.setter
    def registry_type(self, registry_type):
        """Sets the registry_type of this Registry.


        :param registry_type: The registry_type of this Registry.  # noqa: E501
        :type: str
        """

        self._registry_type = registry_type

    @property
    def registry_uri(self):
        """Gets the registry_uri of this Registry.  # noqa: E501


        :return: The registry_uri of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._registry_uri

    @registry_uri.setter
    def registry_uri(self, registry_uri):
        """Sets the registry_uri of this Registry.


        :param registry_uri: The registry_uri of this Registry.  # noqa: E501
        :type: str
        """

        self._registry_uri = registry_uri

    @property
    def registry_uuid(self):
        """Gets the registry_uuid of this Registry.  # noqa: E501


        :return: The registry_uuid of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._registry_uuid

    @registry_uuid.setter
    def registry_uuid(self, registry_uuid):
        """Sets the registry_uuid of this Registry.


        :param registry_uuid: The registry_uuid of this Registry.  # noqa: E501
        :type: str
        """

        self._registry_uuid = registry_uuid

    @property
    def repo_count(self):
        """Gets the repo_count of this Registry.  # noqa: E501


        :return: The repo_count of this Registry.  # noqa: E501
        :rtype: int
        """
        return self._repo_count

    @repo_count.setter
    def repo_count(self, repo_count):
        """Sets the repo_count of this Registry.


        :param repo_count: The repo_count of this Registry.  # noqa: E501
        :type: int
        """

        self._repo_count = repo_count

    @property
    def schedule_status_list(self):
        """Gets the schedule_status_list of this Registry.  # noqa: E501


        :return: The schedule_status_list of this Registry.  # noqa: E501
        :rtype: object
        """
        return self._schedule_status_list

    @schedule_status_list.setter
    def schedule_status_list(self, schedule_status_list):
        """Sets the schedule_status_list of this Registry.


        :param schedule_status_list: The schedule_status_list of this Registry.  # noqa: E501
        :type: object
        """

        self._schedule_status_list = schedule_status_list

    @property
    def total_images(self):
        """Gets the total_images of this Registry.  # noqa: E501


        :return: The total_images of this Registry.  # noqa: E501
        :rtype: int
        """
        return self._total_images

    @total_images.setter
    def total_images(self, total_images):
        """Sets the total_images of this Registry.


        :param total_images: The total_images of this Registry.  # noqa: E501
        :type: int
        """

        self._total_images = total_images

    @property
    def total_scanned_images(self):
        """Gets the total_scanned_images of this Registry.  # noqa: E501


        :return: The total_scanned_images of this Registry.  # noqa: E501
        :rtype: int
        """
        return self._total_scanned_images

    @total_scanned_images.setter
    def total_scanned_images(self, total_scanned_images):
        """Sets the total_scanned_images of this Registry.


        :param total_scanned_images: The total_scanned_images of this Registry.  # noqa: E501
        :type: int
        """

        self._total_scanned_images = total_scanned_images

    @property
    def total_vulnerable_images(self):
        """Gets the total_vulnerable_images of this Registry.  # noqa: E501


        :return: The total_vulnerable_images of this Registry.  # noqa: E501
        :rtype: int
        """
        return self._total_vulnerable_images

    @total_vulnerable_images.setter
    def total_vulnerable_images(self, total_vulnerable_images):
        """Sets the total_vulnerable_images of this Registry.


        :param total_vulnerable_images: The total_vulnerable_images of this Registry.  # noqa: E501
        :type: int
        """

        self._total_vulnerable_images = total_vulnerable_images

    @property
    def updated(self):
        """Gets the updated of this Registry.  # noqa: E501


        :return: The updated of this Registry.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Registry.


        :param updated: The updated of this Registry.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Registry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Registry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
