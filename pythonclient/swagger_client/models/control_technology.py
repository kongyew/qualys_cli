# coding: utf-8

"""
    Container Security API

    # Authentication You must authenticate to the Qualys Cloud Platform using Qualys account credentials (user name and password) and get the JSON Web Token (JWT) before you can start using the Container Security APIs. Use the Qualys Authentication API to get the JWT.  **Example Authentication Curl Request**:  curl -X POST https://gateway/auth -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=value1&password=passwordValue&token=true' where - gateway is the base URL to the Qualys API server where your account is located. - **username** and **password** are the credentials of the user account for which you want to fetch Container Security data. - **token** should be **true** - **Content-Type** should be **application/x-www-form-urlencoded**   # noqa: E501

    OpenAPI spec version: v1.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ControlTechnology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'technology_id': 'int',
        'technology_name': 'str',
        'rational': 'str',
        'remediation': 'str'
    }

    attribute_map = {
        'technology_id': 'technologyId',
        'technology_name': 'technologyName',
        'rational': 'rational',
        'remediation': 'remediation'
    }

    def __init__(self, technology_id=None, technology_name=None, rational=None, remediation=None):  # noqa: E501
        """ControlTechnology - a model defined in Swagger"""  # noqa: E501
        self._technology_id = None
        self._technology_name = None
        self._rational = None
        self._remediation = None
        self.discriminator = None
        if technology_id is not None:
            self.technology_id = technology_id
        if technology_name is not None:
            self.technology_name = technology_name
        if rational is not None:
            self.rational = rational
        if remediation is not None:
            self.remediation = remediation

    @property
    def technology_id(self):
        """Gets the technology_id of this ControlTechnology.  # noqa: E501


        :return: The technology_id of this ControlTechnology.  # noqa: E501
        :rtype: int
        """
        return self._technology_id

    @technology_id.setter
    def technology_id(self, technology_id):
        """Sets the technology_id of this ControlTechnology.


        :param technology_id: The technology_id of this ControlTechnology.  # noqa: E501
        :type: int
        """

        self._technology_id = technology_id

    @property
    def technology_name(self):
        """Gets the technology_name of this ControlTechnology.  # noqa: E501


        :return: The technology_name of this ControlTechnology.  # noqa: E501
        :rtype: str
        """
        return self._technology_name

    @technology_name.setter
    def technology_name(self, technology_name):
        """Sets the technology_name of this ControlTechnology.


        :param technology_name: The technology_name of this ControlTechnology.  # noqa: E501
        :type: str
        """

        self._technology_name = technology_name

    @property
    def rational(self):
        """Gets the rational of this ControlTechnology.  # noqa: E501


        :return: The rational of this ControlTechnology.  # noqa: E501
        :rtype: str
        """
        return self._rational

    @rational.setter
    def rational(self, rational):
        """Sets the rational of this ControlTechnology.


        :param rational: The rational of this ControlTechnology.  # noqa: E501
        :type: str
        """

        self._rational = rational

    @property
    def remediation(self):
        """Gets the remediation of this ControlTechnology.  # noqa: E501


        :return: The remediation of this ControlTechnology.  # noqa: E501
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this ControlTechnology.


        :param remediation: The remediation of this ControlTechnology.  # noqa: E501
        :type: str
        """

        self._remediation = remediation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControlTechnology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlTechnology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
